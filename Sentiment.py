# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Hj5P9bEHtuQn4k9wSwZF4Iz_MP6dsZJ
"""

# Import necessary libraries
import pandas as pd
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt

# Load the data
file_path = '/content/drive/MyDrive/Colab Notebooks/mta-customer-feedback-data-beginning-2014-1.csv'
data = pd.read_csv(file_path)

"""**How many unique values are there in the 'Commendation or Complaint' column?**"""

unique_values = data['Commendation or Complaint'].nunique()
print(f"Number of unique values in 'Commendation or Complaint' column: {unique_values}")

"""**What are the unique values in the 'Subject Matter' column?**"""

unique_subject_matter = data['Subject Matter'].unique()
print(f"Unique values in 'Subject Matter' column: {unique_subject_matter}")

"""**How many missing values are there in the 'Issue Detail' column?**"""

missing_values_issue_detail = data['Issue Detail'].isnull().sum()
print(f"Number of missing values in 'Issue Detail' column: {missing_values_issue_detail}")

"""**Apply Linear Discriminant Analysis (LDA) for dimensionality reduction.**"""

from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.model_selection import train_test_split

# Assuming you have features in X and labels in y
X = data.drop(['Commendation or Complaint'], axis=1)  # Replace with actual features
y = data['Commendation or Complaint']  # Replace with actual labels

# Convert categorical labels to numerical labels
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Identify categorical columns
categorical_columns = X.select_dtypes(include=['object']).columns

# Apply one-hot encoding to categorical columns
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(), categorical_columns)
    ],
    remainder='passthrough'
)

X = preprocessor.fit_transform(X)

# Convert sparse matrix to dense array
X = X.toarray()

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Apply Linear Discriminant Analysis
lda = LinearDiscriminantAnalysis()
X_train_lda = lda.fit_transform(X_train, y_train)
X_test_lda = lda.transform(X_test)

"""**Visualize the LDA-transformed data.**"""

# Assuming you have one class in 'Commendation or Complaint' (binary classification)
plt.figure(figsize=(10, 6))
plt.scatter(X_train_lda, y_train, cmap='viridis', edgecolor='k', s=50)
plt.title('LDA-Transformed Data')
plt.xlabel('LD1')
plt.ylabel('Class')
plt.show()

"""**Display the coefficients of each feature after LDA.**"""

import pandas as pd

# Assuming X is a NumPy array, convert it to a DataFrame
X_df = pd.DataFrame(X)

feature_importances = lda.coef_[0]
feature_names = X_df.columns
feature_coefficients = dict(zip(feature_names, feature_importances))

print("Feature Coefficients after LDA:")
for feature, coefficient in feature_coefficients.items():
    print(f"{feature}: {coefficient}")

"""**Evaluate the performance of the model after LDA.**"""

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.model_selection import train_test_split

# Assuming you have X and y for training and X_test_lda and y_test for testing
# Replace this with your actual data
X_train, X_test_lda, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Assuming you have trained an LDA classifier
lda = LinearDiscriminantAnalysis()
clf = lda.fit(X_train, y_train)

# Now you can make predictions and evaluate the model
y_pred = clf.predict(X_test_lda)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("Confusion Matrix:")
print(conf_matrix)
print("Classification Report:")
print(class_report)

"""**Visualize the Separation of Classes after LDA Transformation**"""

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import numpy as np
# Assuming you have X_train and y_train
lda = LinearDiscriminantAnalysis(n_components=1)
X_train_lda = lda.fit_transform(X_train, y_train)

# Assuming you have two classes in 'Commendation or Complaint' (binary classification)
plt.figure(figsize=(10, 6))
plt.scatter(X_train_lda, np.zeros_like(X_train_lda), c=y_train, cmap='viridis', edgecolor='k', s=50)
plt.title('Separation of Classes after LDA Transformation')
plt.xlabel('LD1')
plt.show()

"""**Visualize Class Separation with Decision Boundaries**"""

import numpy as np
from mlxtend.plotting import plot_decision_regions
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import matplotlib.pyplot as plt

# Assuming binary classification and a trained classifier (clf)

# Fit the classifier on the 2D LDA-transformed data
lda_2d = LinearDiscriminantAnalysis(n_components=min(2, X_train.shape[1], len(np.unique(y_train)) - 1))
X_train_lda_2d = lda_2d.fit_transform(X_train, y_train)
clf.fit(X_train_lda_2d, y_train)

# Plot decision boundaries
plt.figure(figsize=(10, 6))
plot_decision_regions(X_train_lda_2d, y_train, clf=clf, legend=2)
plt.title('Decision Boundaries after LDA Transformation')
plt.xlabel('LD1')
plt.ylabel('LD2')
plt.show()

"""**Visualize Feature Coefficients**"""

plt.figure(figsize=(12, 6))
plt.bar(feature_names, feature_importances)
plt.title('Feature Coefficients after LDA')
plt.xlabel('Feature Names')
plt.ylabel('Coefficient Value')
plt.xticks(rotation=45, ha='right')
plt.show()

"""**Visualizing Confusion Matrix**"""

import seaborn as sns

# Plot confusion matrix as a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title('Confusion Matrix')
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.show()

"""**Explore the Distribution of 'Commendation or Complaint' Classes**"""

# Assuming 'Commendation or Complaint' is the target variable
plt.figure(figsize=(8, 6))
sns.countplot(x='Commendation or Complaint', data=data)
plt.title('Distribution of Commendation or Complaint Classes')
plt.xlabel('Class')
plt.ylabel('Count')
plt.show()

"""**How is the distribution of customer feedback across different years?**"""

plt.figure(figsize=(10, 6))
sns.countplot(x='Year', data=data)
plt.title('Distribution of Customer Feedback by Year')
plt.xlabel('Year')
plt.ylabel('Count')
plt.show()

"""**What are the most common subject matters mentioned in customer feedback?**"""

plt.figure(figsize=(12, 6))
sns.countplot(x='Subject Matter', data=data, order=data['Subject Matter'].value_counts().index)
plt.title('Most Common Subject Matters in Customer Feedback')
plt.xlabel('Subject Matter')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.show()

"""**How do quarterly trends in customer feedback vary across different years?**"""

plt.figure(figsize=(10, 6))
sns.countplot(x='Quarter', data=data, hue='Year')
plt.title('Quarterly Trends in Customer Feedback')
plt.xlabel('Quarter')
plt.ylabel('Count')
plt.legend(title='Year', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""**How does the distribution of 'Subject Detail' vary for commendations and complaints?**"""

plt.figure(figsize=(25, 6))
sns.countplot(x='Subject Detail', data=data, hue='Commendation or Complaint', order=data['Subject Detail'].value_counts().index)
plt.title('Relationship Between Subject Detail and Commendation or Complaint')
plt.xlabel('Subject Detail')
plt.ylabel('Count')
plt.xticks(rotation=90, ha='right')
plt.legend(title='Commendation or Complaint', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""**How does the frequency of commendations and complaints change over different quarters?**"""

plt.figure(figsize=(10, 6))
sns.countplot(x='Quarter', data=data, hue='Commendation or Complaint')
plt.title('Frequency of Commendations and Complaints Across Quarters')
plt.xlabel('Quarter')
plt.ylabel('Count')
plt.legend(title='Commendation or Complaint', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""**What is the distribution of customer feedback subject matters within each year?**"""

plt.figure(figsize=(12, 6))
sns.countplot(x='Year', data=data, hue='Subject Matter')
plt.title('Distribution of Subject Matters Across Years')
plt.xlabel('Year')
plt.ylabel('Count')
plt.legend(title='Subject Matter', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""**Are there any noticeable trends in customer feedback across different agencies?**"""

plt.figure(figsize=(12, 6))
sns.countplot(x='Agency', data=data, hue='Commendation or Complaint', order=data['Agency'].value_counts().index)
plt.title('Trends in Customer Feedback Across Agencies')
plt.xlabel('Agency')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Commendation or Complaint', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""**How does the distribution of customer feedback vary for different 'Subject Matter' within each quarter?**"""

plt.figure(figsize=(14, 6))
sns.countplot(x='Quarter', data=data, hue='Subject Matter', order=data['Quarter'].value_counts().index)
plt.title('Distribution of Subject Matters Across Quarters')
plt.xlabel('Quarter')
plt.ylabel('Count')
plt.legend(title='Subject Matter', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""**How are the lengths of 'Subject Detail' and 'Issue Detail' related?**"""

data['Subject Detail Length'] = data['Subject Detail'].apply(lambda x: len(str(x)))
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Issue Detail Length', y='Subject Detail Length', data=data, hue='Commendation or Complaint')
plt.title('Relationship Between Lengths of Subject Detail and Issue Detail')
plt.xlabel('Issue Detail Length')
plt.ylabel('Subject Detail Length')
plt.show()

"""**How does the sentiment of customer feedback change over the years?**"""

plt.figure(figsize=(12, 6))
sns.countplot(x='Year', data=data, hue='Commendation or Complaint', palette='coolwarm')
plt.title('Sentiment of Customer Feedback Over the Years')
plt.xlabel('Year')
plt.ylabel('Count')
plt.legend(title='Commendation or Complaint', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()